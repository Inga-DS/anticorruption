# -*- coding: utf-8 -*-
"""Rostov_fraud_detection03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VP-6RF0aPDskeyoYDkRsH3pP4r1PHOB5
"""

!pip install catboost

"""Решение команды DataKit в рамках хакатона 13-15 мая. 
Кейс 9. Предсказание подозрительных операций по банковским картам. Датасет https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud?resource=download 
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split   #to divide dataset in train and test
#Import scikit-learn metrics module for accuracy calculation
from catboost import CatBoostClassifier
from sklearn import metrics


RS = 42  #we will fix random state

# подключаем гугл диск на котором данные
from google.colab import drive
drive.mount ('/content/gdrive', force_remount = True)

!cp /content/gdrive/'My Drive'/2022projects/Hack_Rostov_may13_15/archive.zip .

!ls

!unzip archive.zip

data_df = pd.read_csv('creditcard.csv')
data_df.head(2)

data_df.describe().T

train_df = data_df[:280_000]
test_df = data_df[280_000:]

data_df.shape

train_df.columns

X_features = ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10',
       'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20',
       'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount']

#DIVIDE DATA TO TRAIN AND TEST
X_train, X_val, y_train, y_val = train_test_split(train_df[X_features], 
                                                                      train_df['Class'],
                                                                      shuffle=True, 
                                                                      test_size=0.3,random_state=RS)

clf = CatBoostClassifier(
    iterations=100,
    depth = 11,
    learning_rate=0.1,
    loss_function='CrossEntropy',
    random_seed = RS
)

#Train the model using the training sets y_pred=clf.predict(X_test)
clf.fit(X_train,y_train)

y_pred=clf.predict(X_val)
y_pred[:10]

feature_importance = sorted(zip(map(lambda x: round(x, 4), 
                                    clf.feature_importances_), 
                                X_features), 
             reverse=True)

for i in range(len(feature_importance)):
  print(feature_importance[i])

#X_val[1917:1925].to_csv("test.csv")

clf.score(X_val,y_val)

y_t = clf.predict(test_df[X_features])
clf.score(y_t,test_df['Class'])

metrics.f1_score(y_val,y_pred)

#построим матрицу сопряженности confusion matrix
target_names = ['fraud operation 1', 'normal operation 0']
report = metrics.classification_report(y_val, y_pred,target_names=target_names)
report.split('\n')
print(report[:170])

"""ошибки первого рода - пропуск цели

ошибки второго рода - ложное срабатывание
"""

clf.save_model('clf_cb03.cbm',
               format='cbm')

!ls

#load binary file, we will use in web application
from google.colab import files
files.download('clf_cb03.cbm')



